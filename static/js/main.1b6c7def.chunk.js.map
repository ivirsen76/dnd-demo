{"version":3,"sources":["Card.js","DndOld.js","App.js","reportWebVitals.js","index.js"],"names":["ItemTypes","style","border","padding","marginBottom","backgroundColor","cursor","Card","React","forwardRef","ref","text","connectDragSource","isDragging","connectDropTarget","elementRef","useRef","useState","grabbed","setGrabbed","useImperativeHandle","getNode","current","useEffect","timeout","element","handleTouchStart","setTimeout","handleTouchMove","clearTimeout","handleTouchEnd","addEventListener","removeEventListener","createElement","opacity","DropTarget","hover","props","monitor","component","node","dragIndex","getItem","index","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","moveCard","connect","dropTarget","DragSource","beginDrag","id","dragSource","width","DndOld","cards","setCards","dragCard","update","$splice","HTML5toTouch","backends","options","delayTouchStart","ignoreContextMenu","map","card","i","App","document","body","classList","add","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1b6c7def.chunk.js","sourcesContent":["import React, { useImperativeHandle, useRef, useEffect, useState } from 'react';\nimport { ConnectDropTarget, ConnectDragSource, DropTargetMonitor, DragSourceMonitor } from 'react-dnd';\nimport { DragSource, DropTarget, DropTargetConnector, DragSourceConnector } from 'react-dnd';\nimport { XYCoord } from 'dnd-core';\n\nconst ItemTypes = {\n    CARD: 'card',\n};\n\nconst style = {\n    border: '1px dashed gray',\n    padding: '0.5rem 1rem',\n    marginBottom: '.5rem',\n    backgroundColor: 'white',\n    cursor: 'move',\n};\nconst Card = React.forwardRef(({ text, isDragging, connectDragSource, connectDropTarget }, ref) => {\n    const elementRef = useRef(null);\n    const [grabbed, setGrabbed] = useState(false);\n    connectDragSource(elementRef);\n    connectDropTarget(elementRef);\n    const opacity = 1; // isDragging ? 0.2 : 1;\n    useImperativeHandle(ref, () => ({\n        getNode: () => elementRef.current,\n    }));\n\n    useEffect(() => {\n        let timeout;\n        const element = elementRef.current;\n\n        const handleTouchStart = () => {\n            setGrabbed(false);\n\n            timeout = setTimeout(() => {\n                setGrabbed(true);\n            }, 120);\n        }\n\n        const handleTouchMove = () => {\n            clearTimeout(timeout);\n        }\n\n        const handleTouchEnd = () => {\n            clearTimeout(timeout);\n            setGrabbed(false);\n        }\n\n        element.addEventListener('touchstart', handleTouchStart, false);\n        element.addEventListener('touchmove', handleTouchMove, false);\n        element.addEventListener('touchend', handleTouchEnd, false);\n        element.addEventListener('touchcancel', handleTouchEnd, false);\n\n        return () => {\n            element.removeEventListener('touchstart', handleTouchStart);\n            element.removeEventListener('touchmove', handleTouchMove);\n            element.removeEventListener('touchend', handleTouchEnd);\n            element.removeEventListener('touchcancel', handleTouchEnd);\n        }\n    }, []);\n\n    return React.createElement(\n        'div',\n        { ref: elementRef, style: {\n            ...style,\n            opacity,\n            ...(grabbed ? { backgroundColor: '#ccc' } : {})\n        }},\n        text\n    );\n});\nexport default DropTarget(\n    ItemTypes.CARD,\n    {\n        hover(props, monitor, component) {\n            if (!component) {\n                return null;\n            }\n            // node = HTML Div element from imperative API\n            const node = component.getNode();\n            if (!node) {\n                return null;\n            }\n            const dragIndex = monitor.getItem().index;\n            const hoverIndex = props.index;\n            // Don't replace items with themselves\n            if (dragIndex === hoverIndex) {\n                return;\n            }\n            // Determine rectangle on screen\n            const hoverBoundingRect = node.getBoundingClientRect();\n            // Get vertical middle\n            const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n            // Determine mouse position\n            const clientOffset = monitor.getClientOffset();\n            // Get pixels to the top\n            const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n            // Only perform the move when the mouse has crossed half of the items height\n            // When dragging downwards, only move when the cursor is below 50%\n            // When dragging upwards, only move when the cursor is above 50%\n            // Dragging downwards\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n                return;\n            }\n            // Dragging upwards\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n                return;\n            }\n            // Time to actually perform the action\n            props.moveCard(dragIndex, hoverIndex);\n            // Note: we're mutating the monitor item here!\n            // Generally it's better to avoid mutations,\n            // but it's good here for the sake of performance\n            // to avoid expensive index searches.\n            monitor.getItem().index = hoverIndex;\n        },\n    },\n    connect => ({\n        connectDropTarget: connect.dropTarget(),\n    })\n)(\n    DragSource(\n        ItemTypes.CARD,\n        {\n            beginDrag: props => ({\n                id: props.id,\n                index: props.index,\n            }),\n        },\n        (connect, monitor) => {\n            return {\n                connectDragSource: connect.dragSource(),\n                isDragging: monitor.isDragging(),\n            }\n        }\n    )(Card)\n);\n","import React, { useState } from 'react';\nimport Card from './Card';\nimport { DndProvider } from 'react-dnd-multi-backend';\nimport HTML5toTouch from 'react-dnd-multi-backend/dist/cjs/HTML5toTouch';\nimport update from 'immutability-helper';\n\nconst style = {\n    width: 200,\n};\n\nconst DndOld = () => {\n    const [cards, setCards] = useState([\n        {\n            id: 1,\n            text: 'Write a cool JS library',\n        },\n        {\n            id: 2,\n            text: 'Make it generic enough',\n        },\n        {\n            id: 3,\n            text: 'Write README',\n        },\n        {\n            id: 4,\n            text: 'Create some examples',\n        },\n        {\n            id: 5,\n            text: 'Spam in Twitter and IRC to promote it (note that this element is taller than the others)',\n        },\n        {\n            id: 6,\n            text: '???',\n        },\n        {\n            id: 7,\n            text: 'PROFIT',\n        },\n        {\n            id: 8,\n            text: 'Lorerm sjglsj klsjdfkl jsklf skljfl ksjd fl jioweiuoi sjfgoiuwoi sjmoddiosoj fjsodf osjdof osjof sojfo sdojo',\n        },\n        {\n            id: 9,\n            text: 'Lorerm sjglsj klsjdfkl jsklf skljfl ksjd fl jioweiuoi sjfgoiuwoi sjmoddiosoj fjsodf osjdof osjof sojfo sdojo',\n        },\n        {\n            id: 10,\n            text: 'Lorerm sjglsj klsjdfkl jsklf skljfl ksjd fl jioweiuoi sjfgoiuwoi sjmoddiosoj fjsodf osjdof osjof sojfo sdojo',\n        },\n        {\n            id: 11,\n            text: 'Lorerm sjglsj klsjdfkl jsklf skljfl ksjd fl jioweiuoi sjfgoiuwoi sjmoddiosoj fjsodf osjdof osjof sojfo sdojo',\n        },\n        {\n            id: 12,\n            text: 'Lorerm sjglsj klsjdfkl jsklf skljfl ksjd fl jioweiuoi sjfgoiuwoi sjmoddiosoj fjsodf osjdof osjof sojfo sdojo',\n        },\n        {\n            id: 13,\n            text: 'Lorerm sjglsj klsjdfkl jsklf skljfl ksjd fl jioweiuoi sjfgoiuwoi sjmoddiosoj fjsodf osjdof osjof sojfo sdojo',\n        },\n    ]);\n\n    const moveCard = (dragIndex, hoverIndex) => {\n        const dragCard = cards[dragIndex];\n        setCards(\n            update(cards, {\n                $splice: [\n                    [dragIndex, 1],\n                    [hoverIndex, 0, dragCard],\n                ],\n            })\n        );\n    };\n\n    // console.log(HTML5toTouch);\n\n    // HTML5toTouch.backends[0].options = { delay: 500 };\n    HTML5toTouch.backends[1].options = { ...HTML5toTouch.backends[1].options, delayTouchStart: 120, ignoreContextMenu: true };\n\n    return (\n        <DndProvider options={HTML5toTouch}>\n            <div style={style}>\n                {cards.map((card, i) => (\n                    <Card key={card.id} index={i} id={card.id} text={card.text} moveCard={moveCard} />\n                ))}\n            </div>\n        </DndProvider>\n    );\n};\n\n\nexport default DndOld;","import { useEffect } from 'react';\nimport DndOld from \"./DndOld.js\";\nimport './index.css';\n\nfunction App() {\n    useEffect(() => {\n        document.body.classList.add(\"disable-select\");\n    }, []);\n\n    return (\n        <div className=\"wrapper\">\n            <div>\n                <div className=\"description\">With old DnD</div>\n                <div className=\"list\"><DndOld /></div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}